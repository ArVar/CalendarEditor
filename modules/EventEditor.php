<?php

/**
 * Contao Open Source CMS
 * Copyright (C) 2005-2013 Leo Feyer
 *
 * PHP version 5
 *
 * @package		CalendarEditor
 * @author		Daniel Gaussmann <mail@gausi.de>
 * @author		Arthur Varkentin <mail@varkentin.de> 
 * @copyright	Daniel Gaussmann, Arthur Varkentin 2011-2013
 * @license		http://www.gnu.org/licenses/lgpl-3.0.html LGPL
 * @version		3.0.0 beta
 */


/**
 * Class EventEditor
 */
class EventEditor extends Frontend
{

	/**
	 * Template
	 * @var string
	 */
	protected $strTemplate = '';

         /**
          * Search for the DatabaseResult the matching entry (entries) in $arrEvents and set additional information
          */
        public function addEventInformation(Database_Result $objEvents, $objId, $objCalendar, &$arrEvents, $strUrl, $userID, $AllowAllEdits)
        {
			foreach ($arrEvents as &$intnext) {
				foreach ($intnext as &$intdate) {
					foreach ($intdate as &$aEvent){
						if ($objEvents->id == $aEvent['id']) {
							//echo $objCalendar->id.': '.$userID.'--'.$aEvent['FE_User'].'<br />';
							if (($AllowAllEdits || ($aEvent['FE_User'] == $userID)) && (!$aEvent['disable_editing']))
							{
								$aEvent['editref'] = $strUrl.'?edit='.$aEvent['id'];
								$aEvent['editLabel'] = $GLOBALS['TL_LANG']['MSC']['caledit_editLabel'];
								$aEvent['editTitle'] = $GLOBALS['TL_LANG']['MSC']['caledit_editTitle'];
							}
						}
					}
				}
			}
        }

         /**
         Manipulate the arrEvents-Array generated by ModuleCalendar and ModuleEventlist
         **/
         public function allEventsHook($arrEvents, $arrCalendars, $intStart, $intEnd, $objCalendarModule)
        {
         	// some Copy&Paste from Events.php
            if (!is_array($arrCalendars) || (!FE_USER_LOGGED_IN)) {
				return $arrEvents;
			}

            $this->import('String');
			$time = time();
            $this->import('FrontendUser', 'User');


			foreach ($arrCalendars as $id) {
                 	// get properties of this calendar
                $objCalendar = $this->Database->prepare("SELECT * FROM tl_calendar WHERE id=?")
                         			    	->limit(1)
											->execute($id);

                if ($objCalendar->AllowEdit) {
                    // get the JumpToEdit-Page for this calendar
	                $objPage = $this->Database->prepare("SELECT id, alias FROM tl_page WHERE id=(SELECT caledit_jumpTo FROM tl_calendar WHERE id=?)")
									  ->limit(1)
									  ->execute($id);
					if ($objPage->numRows) {
						$strUrl = $this->generateFrontendUrl($objPage->row(), '');
					}
					else {
						$strUrl = $this->Environment->request;	
					}

					// Get Groups which are allowed to edit events in this calendar
					$groups = deserialize($objCalendar->caledit_groups);
					if (!is_array($groups) || count($groups) < 1 || count(array_intersect($groups, $this->User->groups)) < 1)
					{
						//echo 'Sie haben keine Erlaubnis diesen Kalender zu bearbeiten: '. $objCalendar->title.'<br />';
						$AuthorizedUser = FALSE;
					}
					else {	
						$AuthorizedUser = TRUE;
						//echo 'Sie haben  Erlaubnis diesen Kalender zu bearbeiten: '. $objCalendar->title.'<br />';
					}

					// Get Admin-Groups which are allowed to edit events in this calendar
					// (Admins are allowed to edit events even if the "only owner"-setting is checked)
					$admin_groups = deserialize($objCalendar->caledit_adminGroup);
					if (!is_array($admin_groups) || count($admin_groups) < 1 || count(array_intersect($admin_groups, $this->User->groups)) < 1)
					{
						//echo 'Sie sind -KEIN- Admin fuer diesen Kalender '. $objCalendar->title.'<br />';
						$UserIsAdmin = FALSE;
					}
					else {
						//echo 'Sie sind  Admin fuer diesen Kalender: '. $objCalendar->title.'<br />';
						$UserIsAdmin = TRUE;
					}


					if ($AuthorizedUser || $UserIsAdmin )
					{
						// Now: Get all Events in this calendar (as in ModuleCalendar, but without the constraint "AND published=1")
						$objEvents = $this->Database->prepare("SELECT *, (SELECT title FROM tl_calendar WHERE id=?) AS calendar, (SELECT name FROM tl_user WHERE id=author) author FROM tl_calendar_events WHERE pid=? AND ((startTime>=? AND startTime<=?) OR (endTime>=? AND endTime<=?) OR (startTime<=? AND endTime>=?) OR (recurring=1 AND (recurrences=0 OR repeatEnd>=?) AND startTime<=?))" . (!BE_USER_LOGGED_IN ? " AND (start='' OR start<$time) AND (stop='' OR stop>$time)" : "") . " ORDER BY startTime")
											->execute($id, $id, $intStart, $intEnd, $intStart, $intEnd, $intStart, $intEnd, $intStart, $intEnd);

						if ($objEvents->numRows < 1) {
							continue;  // nothing to do here (no events found)
						}

						$AllowAllEdits =  ($UserIsAdmin) || (!$objCalendar->caledit_onlyUser);
						
						while ($objEvents->next()) {
							// We have some events in this calendar, and the user is member of a group, which is allowed to edit events
							// So: Add Edit-Links to these Events.
							$this->addEventInformation($objEvents, $objEvents->id, $objCalendar, $arrEvents, $strUrl, $this->User->id, $AllowAllEdits);
						}
					}
				} // else: Frontend-Editing is not allowed for this calender. Modifications of the Events not necessary.

            }
            return $arrEvents;
         }
}
